set_real_ip_from  172.28.0.0/16;
real_ip_header    X-Forwarded-For;
real_ip_recursive on;

client_max_body_size 10G;
chunked_transfer_encoding on;

# disable output of nginx version etc.
server_tokens off;
# Fix 400 (Bad Request) Error
large_client_header_buffers 8 16k;

# caching configuration for validation responses
proxy_cache_path /tmp/validatecache levels=1:2 keys_zone=auth_cache:10m max_size=128m inactive=30m use_temp_path=off;

# log format with application performance metrics in logfmt style
log_format apm_auth 't="$time_iso8601" h=$host u=$remote_user client=$remote_addr '
  'status=$status '
  'request="$request" '
  'req_time=$request_time '
  'ua="$http_user_agent" '
  'method=$request_method '
  'req_length=$request_length '
  'bytes_sent=$bytes_sent '
  'body_bytes_sent=$body_bytes_sent '
  'referer="$http_referer" '
  'us_addr=$upstream_addr '
  'us_status=$upstream_status '
  'us_connect_time=$upstream_connect_time '
  'us_header_time=$upstream_header_time '
  'us_response_time=$upstream_response_time '
  'auth_resp="$authserver_x_auth_response" ';

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Set appropriate X-Forwarded-Ssl header
map $http_x_forwarded_ssl $proxy_x_forwarded_ssl {
  default $http_x_forwarded_ssl;
  '' $https;
}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";

server {
    listen 80;
    server_name localhost;

    access_log  /var/log/nginx/access.log  apm_auth;

    client_max_body_size 64M;
    proxy_request_buffering off;

    root   /usr/share/nginx/html;
    index  index.html index.htm;

    # workaround with variable for dynamic resolve, not just at startup
    resolver 127.0.0.11 valid=10s; # 127.0.0.11 comes from /etc/resolv.conf on the nginx container
    set $loki loki;
    set $resolve_auth_request_domain {{ loki_auth_request_domain }};

    ##  Restrict by default (read/write)
    # Basic Auth
    auth_basic           "Restricted by Basic auth";
    auth_basic_user_file /etc/nginx/conf.d/htaccess/htpasswd;

    location / {
        proxy_pass http://$loki:3100;
    }

    # API Endpoints Documentation https://github.com/grafana/loki/blob/master/docs/api.md

    # Allow write only by separate htpasswd file
    location /loki/api/v1/push {
        # use authserver instead of basic auth for this location
        # send all requests to the `/validate` location for authorization
        auth_basic off;
        auth_request /validate;

        # Save values from Authserver Response
        auth_request_set $authserver_x_auth_user $upstream_http_x_auth_user;
        auth_request_set $authserver_x_auth_response $upstream_http_x_auth_response;
        # pass headers to backend
        proxy_set_header X-Auth-User $authserver_x_auth_user;
        proxy_set_header X-Auth-Response $authserver_x_auth_response;
        # return headers to client
        add_header X-Auth-User $authserver_x_auth_user always;
        add_header X-Auth-Response $authserver_x_auth_response always;

{% if not loki_push_access_log %}
        access_log off;
{% endif %}
        proxy_pass http://$loki:3100;
    }

    # Always allow readyness endpoint
    location /ready {
        auth_basic off;
        proxy_pass http://$loki:3100;
    }

    # location /metrics {
    #     auth_basic off;
    #     proxy_pass http://$loki:3100;

    #     access_log off;
    # }

    # Test Location
    # curl -u username:password https://domain/test_push_auth -v
    location /test_auth {

        # use authserver instead of basic auth for this location
        # send all requests to the `/validate` location for authorization
        auth_basic off;
        auth_request /validate;

        # Save values from Authserver Response
        auth_request_set $authserver_x_auth_user $upstream_http_x_auth_user;
        auth_request_set $authserver_x_auth_response $upstream_http_x_auth_response;
        # pass headers to backend
        proxy_set_header X-Auth-User $authserver_x_auth_user;
        proxy_set_header X-Auth-Response $authserver_x_auth_response;
        # return headers to client
        add_header X-Auth-User $authserver_x_auth_user always;
        add_header X-Auth-Response $authserver_x_auth_response always;

        proxy_pass http://$loki/ready ;
    }

    # internal location for validate by auth_request
    # https://nginx.org/en/docs/http/ngx_http_auth_request_module.html
    location = /validate {
        internal;

        proxy_cache_valid 200 {{ loki_auth_request_cache_time }} ;
        proxy_cache_valid 403 {{ loki_auth_request_cache_time_403 }} ;

        proxy_cache auth_cache;
        proxy_cache_methods GET;
        proxy_cache_key "$host$proxy_host$request_uri $remote_user";

        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        proxy_pass https://$resolve_auth_request_domain:443{{ loki_auth_request_location }};

        proxy_pass_request_body off;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Content-Length "";

        # Save values from Authserver Response
        auth_request_set $authserver_x_auth_user $upstream_http_x_auth_user;
        auth_request_set $authserver_x_auth_response $upstream_http_x_auth_response;
    }

    # nginx authproxy status
    location = /proxystatus {
        auth_basic off;
        auth_request off;
        add_header Content-Type text/plain;
        return 200 "NGINX Status OK\n";
    }
    location = /TEST-ALERT {
        auth_basic off;
        auth_request off;
        add_header Content-Type text/plain;
        return 200 "TEST-ALERT Request received. OK\n";
    }
}
