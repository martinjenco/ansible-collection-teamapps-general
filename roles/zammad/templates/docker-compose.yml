---
## Zammad docker compose file based on
# https://raw.githubusercontent.com/zammad/zammad-docker-compose/master/docker-compose.yml
# configuration env vars:
# https://docs.zammad.org/en/latest/install/docker-compose/environment.html

x-shared:
  zammad-service: &zammad-service
    environment: &zammad-environment
      MEMCACHE_SERVERS: ${MEMCACHE_SERVERS}
      POSTGRESQL_DB: ${POSTGRES_DB}
      POSTGRESQL_HOST: ${POSTGRES_HOST}
      POSTGRESQL_USER: ${POSTGRES_USER}
      POSTGRESQL_PASS: ${POSTGRES_PASS}
      POSTGRESQL_PORT: ${POSTGRES_PORT}
      REDIS_URL: ${REDIS_URL}
      # Allow passing in these variables via .env:
      AUTOWIZARD_JSON:
      AUTOWIZARD_RELATIVE_PATH:
      ELASTICSEARCH_ENABLED:
      ELASTICSEARCH_HOST:
      ELASTICSEARCH_PORT:
      ELASTICSEARCH_SCHEMA:
      ELASTICSEARCH_NAMESPACE:
      ELASTICSEARCH_REINDEX:
      ELASTICSEARCH_SSL_VERIFY:
      NGINX_PORT:
      NGINX_SERVER_NAME:
      NGINX_SERVER_SCHEME:
      POSTGRESQL_DB_CREATE:
      POSTGRESQL_OPTIONS:
      RAILS_TRUSTED_PROXIES:
      ZAMMAD_WEB_CONCURRENCY:
      ZAMMAD_SESSION_JOBS:
      ZAMMAD_PROCESS_SCHEDULED:
      ZAMMAD_PROCESS_DELAYED_JOBS_WORKERS:
    image: ${IMAGE_REPO}:${VERSION}
    restart: ${RESTART}
    volumes:
      - ./data/zammad-storage:/opt/zammad/storage
    depends_on:
      - zammad-memcached
      - zammad-postgresql
      - zammad-redis

services:

  zammad-backup:
    command: ["zammad-backup"]
    depends_on:
      - zammad-railsserver
      - zammad-postgresql
    entrypoint: /usr/local/bin/backup.sh
    environment:
      <<: *zammad-environment
      BACKUP_TIME: "{{ zammad_backup_time }}"
      HOLD_DAYS: "{{ zammad_backup_hold_days }}"
      NO_FILE_BACKUP: "{{ zammad_backup_no_file_backup | ternary('yes', 'no')}}"
      TZ: "{{ zammad_backup_timezone }}"
    image: postgres:${POSTGRES_VERSION}
    restart: ${RESTART}
    volumes:
      - ./data/zammad-backup:/var/tmp/zammad
      - ./data/zammad-storage:/opt/zammad/storage:ro
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro

  zammad-elasticsearch:
    image: bitnamilegacy/elasticsearch:${ELASTICSEARCH_VERSION}
    restart: ${RESTART}
    environment:
      <<: *zammad-environment
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms{{ zammad_elasticsearch_memory }} -Xmx{{ zammad_elasticsearch_memory }}"
    volumes:
      - ./data/elasticsearch-data:/bitnami/elasticsearch/data

  zammad-init:
    <<: *zammad-service
    command: ["zammad-init"]
    depends_on:
      - zammad-postgresql
    restart: on-failure
    user: 0:0
    volumes:
      - ./data/zammad-storage:/opt/zammad/storage

  zammad-memcached:
    command: memcached -m 250M
    image: memcached:${MEMCACHE_VERSION}
    restart: ${RESTART}
    deploy:
      resources:
        limits:
          memory: 256M

  zammad-nginx:
    <<: *zammad-service
    command: ["zammad-nginx"]
    expose:
      - "8080"
    depends_on:
      - zammad-railsserver
      - zammad-websocket
    environment:
      <<: *zammad-environment
      VIRTUAL_HOST: "{{ zammad_domain }}"
      LETSENCRYPT_HOST: "{{ zammad_domain }}"
      LETSENCRYPT_EMAIL: "{{ letsencrypt_email }}"
    networks:
      - default
      - webproxy

  zammad-postgresql:
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    image: postgres:${POSTGRES_VERSION}
    restart: ${RESTART}
    volumes:
      - ./data/postgresql-data:/var/lib/postgresql/data

  zammad-railsserver:
    <<: *zammad-service
    command: ["zammad-railsserver"]

  zammad-redis:
    image: redis:${REDIS_VERSION}
    restart: ${RESTART}
    volumes:
      - ./data/redis-data:/data
    deploy:
      resources:
        limits:
          memory: 128M

  zammad-scheduler:
    <<: *zammad-service
    command: ["zammad-scheduler"]

  zammad-websocket:
    <<: *zammad-service
    command: ["zammad-websocket"]

networks:
  default:
    driver: bridge
  webproxy:
    external: true
    name: webproxy
