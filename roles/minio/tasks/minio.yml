- name: verify that the minio_domain is only one domain
  assert:
    that:
      - "not ',' in minio_domain"
    fail_msg: "minio_domain is only for main domain. use minio_addon_domains"

- name: verify that the minio secrets are set
  assert:
    that:
      - "assert_var is defined"
      - "assert_var | length > 0"
      - "assert_var != None"
    fail_msg: "{{ assert_var }} needs to be set!"
  loop_control:
    loop_var: assert_var
  with_items:
    - minio_root_user
    - minio_root_password

- name: verify that the minio console secrets are set
  when: minio_console_enable
  assert:
    that:
      - "assert_var is defined"
      - "assert_var | length > 0"
      - "assert_var != None"
    fail_msg: "{{ assert_var }} needs to be set!"
  loop_control:
    loop_var: assert_var
  with_items:
    - minio_console_pbkdf_passphrase
    - minio_console_pbkdf_salt

- name: minio_directories
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_items:
    - '{{ minio_path }}'
    - '{{ minio_path }}/data'

- name: deploy config
  template:
    src: '{{ item }}'
    dest: '{{ minio_path }}/{{ item }}'
    owner: root
    group: root
    mode: '0640'
  with_items:
    - docker-compose.yml
  notify: minio_restart

- name: minio_docker-compose-up
  community.docker.docker_compose_v2:
    project_src: '{{ minio_path }}'
    state: present
    pull: "{{ minio_docker_pull | ternary('always', 'policy') }}"
    remove_orphans: true
  register: minio__register_compose
  tags: compose_up

- name: print actions by compose # noqa no-handler
  vars:
    actions: "{{ minio__register_compose.actions }}"
  debug:
    var: actions
  changed_when: true
  when: minio__register_compose is defined and minio__register_compose.changed
