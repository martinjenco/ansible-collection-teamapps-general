set_real_ip_from  172.28.0.0/16;
real_ip_header    X-Forwarded-For;
real_ip_recursive on;

# client_max_body_size 10G;
chunked_transfer_encoding on;

# log format with application performance metrics in logfmt style
log_format apm 't="$time_iso8601" h=$host u=$remote_user client=$remote_addr '
    'status=$status '
    'request="$request" '
    'req_time=$request_time '
    'ua="$http_user_agent" '
    'method=$request_method '
    'req_length=$request_length '
    'bytes_sent=$bytes_sent '
    'body_bytes_sent=$body_bytes_sent '
    'referer="$http_referer" '
    'us_addr=$upstream_addr '
    'us_status=$upstream_status '
    'us_connect_time=$upstream_connect_time '
    'us_header_time=$upstream_header_time '
    'us_response_time=$upstream_response_time ';

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
}

# Set appropriate X-Forwarded-Ssl header
map $http_x_forwarded_ssl $proxy_x_forwarded_ssl {
    default $http_x_forwarded_ssl;
    '' $https;
}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;

# buffer tuning for when buffering is on
proxy_buffers 32 16k;
proxy_buffer_size 8k;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";


## Proxy Caching
proxy_cache_path /cache levels=1:2 keys_zone=cache:{{ tileserver_nginx_cache_keys_zone_size }} inactive=30d max_size={{ tileserver_nginx_cache_max_size }};

## rate limit
limit_req_zone $allow_referer_key_api zone=user_tile_rate_limit:10m rate=10r/s;
limit_req_zone $allow_referer_key_api zone=download_tile_rate_limit:10m rate=30r/s;
limit_req_zone $allow_referer_key_api zone=user_other_rate_limit:10m rate=30r/s;

# $arg_key is the value of the ?key=value url parameter
# http://nginx.org/en/docs/http/ngx_http_core_module.html#var_arg_
# for requests with ?key=this-secret-key-allows-download-at-highspeed
# the key arg is passed by tileserver to the viewer, styles.json and to the tiles.json etc.
# Example:
#  https://maps.example.com?key=foo
#  ↳ /styles/maptiler-basic/?key=foo#2/0.00000/0.00000
#    ↳ /styles/maptiler-basic/?key=foo#2/0.00000/0.00000 (Viewer)
#      ↳ /styles/maptiler-basic//style.json?key=foo
#        ↳ /data/v3.json?key=foo (Tles.json)
#          ↳ /data/v3/{z}/{x}/{y}.pbf?key=foo (Vector Tiles)
#        ↳ /fonts/{fontstack}/{range}.pbf?key=foo (Fonts)
map $arg_key $key_api {
    default $binary_remote_addr;
    # "this-secret-key-allows-download-at-highspeed" "";
    include "maps/key_no_rate_limit.conf";
}

# based on the referer header, set allow_referer_key_api to the value of the above map
# or to none as set in the map.
# example: ".yourapplication.example.com" "";
# the value is used as the key for which the requests are accounted (default based on the remote address)
# Requests with an empty key ("") value are not accounted = no limit. http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone
map $http_referer $http_referer_hostname {
    # extract hostname from http://hostname/asdf?foo
    ~^.*://([^/?]+) $1;
}
map $http_referer_hostname $allow_referer_key_api {
    # hostnames; indicates that source values can be hostnames with a prefix or suffix mask http://nginx.org/en/docs/http/ngx_http_map_module.html
    hostnames;
    default $key_api;
    include "maps/hostnames_no_rate_limit.conf";
}

# Limit connections and requests by IP range
## https://serverfault.com/questions/177461/how-to-rate-limit-in-nginx-but-including-excluding-certain-ip-addresses

server {
    listen 80;
    server_name localhost;

    # enable logs with apm format
    access_log  /var/log/nginx/access.log apm;

    client_max_body_size 64M;
    proxy_request_buffering off;

    # Proxy Timeouts
    proxy_read_timeout 180s;
    proxy_connect_timeout 60s;
    proxy_send_timeout 180s;

    root   /usr/share/nginx/html;
    index  index.html index.htm;

    # workaround with variable for dynamic resolve, not just at startup
    resolver 127.0.0.11 valid=10s; # 127.0.0.11 comes from /etc/resolv.conf on the nginx container
    set $tileserver tileserver;

    # # Restrict by default (read/write)
    # auth_basic           "Restricted";
    # auth_basic_user_file /etc/nginx/conf.d/htaccess/htpasswd;

    location = /status {
        add_header Content-Type text/plain;
        return 200 "Status OK\n";
    }

    # Raster tile >= z15, no expiration from OSM update
    location ~ /styles/(?<tile_path>.*/[0-9]+/[0-9]+/(1[5-9]|2[0-9])\.(png|jpeg|webp))$ {
        proxy_pass http://$tileserver:8080;
        proxy_set_header Host $http_host;
        proxy_buffering on;

        limit_req zone=user_tile_rate_limit burst=15;
        limit_req zone=download_tile_rate_limit burst=15;

{% if tileserver_nginx_disable_cache %}
        expires 7d;
        add_header Cache-Control "public";

        proxy_cache cache;
        proxy_cache_valid 200 12h;
        proxy_cache_key $tile_path;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
{% endif %}
    }

    # Raster tile <= 14
    location ~ /styles/(?<tile_path>.*/[0-9]+/[0-9]+/[0-9]+\.(png|jpeg|webp))$ {
        proxy_pass http://$tileserver:8080;
        proxy_set_header Host $http_host;
        proxy_buffering on;

        limit_req zone=user_tile_rate_limit burst=30;
        limit_req zone=download_tile_rate_limit burst=30;

{% if not tileserver_nginx_disable_cache %}
        expires 7d;
        add_header Cache-Control "public";

        proxy_cache cache;
        proxy_cache_valid 200 30d;
        proxy_cache_key $tile_path;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
{% endif %}
    }

    # Vector tile, tilejson
    # rewrite ^/data/v3/([0-9]+/[0-9]+/[0-9]+\.pbf)$ /data/v3/tiles/$1 last;
    # location ~ /data/v3/tiles/(?<postserve_path>.*)$ {
    location ~ /data/(?<data_path>.*/[0-9]+/[0-9]+/[0-9]+\.pbf)$ {
        proxy_pass http://$tileserver:8080;

        proxy_set_header Host $http_host;
        proxy_buffering on;
        limit_req zone=user_tile_rate_limit burst=30;
        limit_req zone=download_tile_rate_limit burst=30;

{% if not tileserver_nginx_disable_cache %}
        expires 1d;
        add_header Cache-Control "public";

        proxy_cache cache;
        proxy_cache_valid 200 204 1d;
        proxy_cache_key data-$data_path;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
{% endif %}
    }

    # Other static and database less resources
    # HTML, CSS, JS, style, font, sprites
    location / {
        proxy_pass http://$tileserver:8080;
        proxy_set_header Host $http_host;
        proxy_buffering on;

        limit_req zone=user_other_rate_limit burst=30 nodelay;

{% if not tileserver_nginx_disable_cache %}
        expires 1d;
        add_header Cache-Control "public";

        proxy_cache cache;
        proxy_cache_valid 200 204 30d;
        proxy_cache_key $request_uri;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
{% endif %}
    }

}
